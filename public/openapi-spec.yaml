openapi: 3.1.0
info:
  title: brodiegroch.ca API
  version: "1.0"
  description: Complete API for managing courses, deliverables, schedule, quick links, grading scale, and personal items

servers:
  - url: https://brodiegroch.ca
    description: Production server

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key authentication
  schemas:
    Course:
      type: object
      properties:
        Course ID:
          type: string
          example: "COMP 213"
        Course Name:
          type: string
          example: "Computing for Engineering Technology"
        Course Average Weighted Grade:
          type: string
          example: "85.5"
        Credit Hours:
          type: string
          example: "3"
        Course Description:
          type: string
          example: "Course description here"
        Professor/Teacher Name:
          type: string
          example: "John Doe"
        Professor/Teacher Email:
          type: string
          format: email
          example: "john.doe@sait.ca"
    QuickLink:
      type: object
      properties:
        Site Name:
          type: string
        Address:
          type: string
          format: uri
        Link_image_id:
          type: string
        Category:
          type: string
    ScheduleItem:
      type: object
      properties:
        Course ID:
          type: string
        Day of Week:
          type: string
        Start Time:
          type: string
          format: date-time
        End Time:
          type: string
          format: date-time
        Location:
          type: string
        Recurring:
          type: string
        Period:
          type: string
    Deliverable:
      type: object
      properties:
        Course ID:
          type: string
        Category:
          type: string
        Deliverable:
          type: string
        Open Date:
          type: string
        Close Date:
          type: string
        Weight %:
          type: string
        Grade %:
          type: string
        Letter Grade:
          type: string
        Status:
          type: string
    DetailedCourse:
      type: object
      properties:
        id:
          type: string
          example: "COMP-213"
        code:
          type: string
          example: "COMP 213"
        name:
          type: string
          example: "Computing for Engineering Technology"
        credits:
          type: number
          example: 3
        semester:
          type: string
          example: "Fall 2025"
        instructor:
          type: object
        description:
          type: string
        schedule:
          type: object
        learningOutcomes:
          type: array
        assessment:
          type: object
        modules:
          type: array
    Error:
      type: object
      properties:
        error:
          type: string
        message:
          type: string

tags:
  - name: courses
    description: Course management
  - name: deliverables
    description: Assignment and deliverable management
  - name: schedule
    description: Schedule management
  - name: quick-links
    description: Quick links management
  - name: grading-scale
    description: Grading scale management
  - name: calendar
    description: Calendar feed generation
  - name: news
    description: Course announcements and news feeds
  - name: documentation
    description: API documentation and action references
  - name: time
    description: Current date and time information

paths:
  # Actions Documentation API
  /api/actions:
    get:
      operationId: getActionDocs
      summary: Get API actions documentation
      description: Retrieve the actions reference documentation for understanding available API endpoints and usage. Useful for GPT to self-reference and understand how to use endpoints.
      tags: [documentation]
      parameters:
        - in: query
          name: action
          description: Filter documentation for a specific action (e.g., "listCourses", "updateDeliverable")
          schema:
            type: string
            example: "listCourses"
        - in: query
          name: category
          description: Filter documentation for a category (e.g., "Course Management", "Deliverables Management")
          schema:
            type: string
            example: "Course Management"
      responses:
        "200":
          description: API actions documentation retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  documentation:
                    type: string
                    description: Full documentation text from actions.txt file
                  timestamp:
                    type: string
                    format: date-time
                    description: Timestamp of when documentation was retrieved
                  note:
                    type: string
                    description: Additional note about the documentation
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Courses API
  /api/data/courses:
    get:
      operationId: listCourses
      summary: List all courses
      description: Retrieve all courses from the system, optionally filtered by course ID
      tags: [courses]
      parameters:
        - name: id
          in: query
          description: Optional course ID to retrieve a specific course
          schema:
            type: string
            example: "COMP 213"
      responses:
        "200":
          description: List of courses retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Course'
        "404":
          description: Course not found (when filtering by id)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      operationId: createCourse
      summary: Create a new course
      description: Add a new course to the system with all course details
      tags: [courses]
      requestBody:
        required: true
        description: Course object containing all course information
        content:
          application/json:
            schema:
              type: object
              required:
                - Course ID
                - Course Name
              properties:
                Course ID:
                  type: string
                  description: Unique course identifier (e.g., "COMP 213")
                Course Name:
                  type: string
                  description: Full course name
                Course Average Weighted Grade:
                  type: string
                  description: Current weighted average grade (optional)
                Credit Hours:
                  type: string
                  description: Number of credit hours
                Course Description:
                  type: string
                  description: Detailed course description
                Professor/Teacher Name:
                  type: string
                  description: Instructor's full name
                Professor/Teacher Email:
                  type: string
                  format: email
                  description: Instructor's email address
              additionalProperties: true
      responses:
        "201":
          description: Course created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        "400":
          description: Bad request - course already exists or missing required fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      operationId: updateCourse
      summary: Update a course
      description: Update an existing course's information. Must include Course ID to identify which course to update.
      tags: [courses]
      requestBody:
        required: true
        description: Complete course object with updated fields
        content:
          application/json:
            schema:
              type: object
              required:
                - Course ID
              properties:
                Course ID:
                  type: string
                  description: Unique course identifier to identify which course to update
                Course Name:
                  type: string
                  description: Full course name
                Course Average Weighted Grade:
                  type: string
                  description: Current weighted average grade
                Credit Hours:
                  type: string
                  description: Number of credit hours
                Course Description:
                  type: string
                  description: Detailed course description
                Professor/Teacher Name:
                  type: string
                  description: Instructor's full name
                Professor/Teacher Email:
                  type: string
                  format: email
                  description: Instructor's email address
              additionalProperties: true
      responses:
        "200":
          description: Course updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        "404":
          description: Course not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      operationId: deleteCourse
      summary: Delete a course
      description: Remove a course from the system by its Course ID
      tags: [courses]
      parameters:
        - name: id
          in: query
          required: true
          description: Course ID to delete
          schema:
            type: string
            example: "COMP 213"
      responses:
        "200":
          description: Course deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
        "404":
          description: Course not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Detailed Courses API
  /api/courses:
    get:
      operationId: getDetailedCourses
      summary: Get detailed course information
      description: Retrieve all detailed course JSON files or a specific course by ID
      tags: [courses]
      parameters:
        - name: id
          in: query
          description: Optional course ID to retrieve a specific course
          schema:
            type: string
            example: "COMP-213"
      responses:
        "200":
          description: Course or courses retrieved successfully
          content:
            application/json:
              schema:
                oneOf:
                  - type: array
                    items:
                      $ref: '#/components/schemas/DetailedCourse'
                  - $ref: '#/components/schemas/DetailedCourse'
        "404":
          description: Course not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      operationId: createDetailedCourse
      summary: Create a new detailed course
      description: Create a new detailed course JSON file with full course information including modules, learning outcomes, and assessment details
      tags: [courses]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DetailedCourse'
      responses:
        "201":
          description: Course created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedCourse'
        "400":
          description: Course already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      operationId: updateDetailedCourse
      summary: Update a detailed course
      description: Update an existing detailed course JSON file with new information
      tags: [courses]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DetailedCourse'
      responses:
        "200":
          description: Course updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedCourse'
        "404":
          description: Course not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      operationId: deleteDetailedCourse
      summary: Delete a detailed course
      description: Delete a course JSON file by course ID
      tags: [courses]
      parameters:
        - name: id
          in: query
          required: true
          description: Course ID to delete
          schema:
            type: string
            example: "COMP-213"
      responses:
        "200":
          description: Course deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
        "400":
          description: Course ID is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Course not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Quick Links API
  /api/data/quick-links:
    get:
      operationId: listQuickLinks
      summary: List all quick links
      description: Retrieve all quick links from the system
      tags: [quick-links]
      responses:
        "200":
          description: List of quick links retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/QuickLink'
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      operationId: createQuickLink
      summary: Create a new quick link
      description: Add a new quick link to the system
      tags: [quick-links]
      requestBody:
        required: true
        description: Quick link object containing all link information
        content:
          application/json:
            schema:
              type: object
              required:
                - Site Name
                - Address
              properties:
                Site Name:
                  type: string
                  description: Display name for the link
                Address:
                  type: string
                  format: uri
                  description: Full URL address
                Link_image_id:
                  type: string
                  description: Image identifier for the link icon
                Category:
                  type: string
                  description: Category to group the link
              additionalProperties: true
      responses:
        "201":
          description: Quick link created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuickLink'
        "400":
          description: Bad request - link already exists or missing required fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      operationId: updateQuickLink
      summary: Update a quick link
      description: Update an existing quick link's information
      tags: [quick-links]
      requestBody:
        required: true
        description: Complete quick link object with updated fields
        content:
          application/json:
            schema:
              type: object
              required:
                - Site Name
              properties:
                Site Name:
                  type: string
                  description: Display name for the link (identifier)
                Address:
                  type: string
                  format: uri
                  description: Full URL address
                Link_image_id:
                  type: string
                  description: Image identifier for the link icon
                Category:
                  type: string
                  description: Category to group the link
              additionalProperties: true
      responses:
        "200":
          description: Quick link updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuickLink'
        "404":
          description: Quick link not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      operationId: deleteQuickLink
      summary: Delete a quick link
      description: Remove a quick link from the system by its Site Name
      tags: [quick-links]
      parameters:
        - name: name
          in: query
          required: true
          description: Site Name of the link to delete
          schema:
            type: string
      responses:
        "200":
          description: Quick link deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
        "400":
          description: Name parameter is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Quick link not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Schedule API
  /api/data/schedule:
    get:
      operationId: listSchedule
      summary: List all schedule items
      description: Retrieve all schedule items, optionally filtered by course ID or day of week
      tags: [schedule]
      parameters:
        - name: courseId
          in: query
          description: Filter schedule items by specific course ID
          schema:
            type: string
            example: "COMP 213"
        - name: dayOfWeek
          in: query
          description: Filter schedule items by day of week (e.g., Monday, Tuesday)
          schema:
            type: string
            example: "Monday"
      responses:
        "200":
          description: List of schedule items retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScheduleItem'
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      operationId: createScheduleItem
      summary: Create a new schedule item
      description: Add a new class time to the schedule
      tags: [schedule]
      requestBody:
        required: true
        description: Schedule item with class time and location information
        content:
          application/json:
            schema:
              type: object
              required:
                - Course ID
                - Day of Week
                - Start Time
                - End Time
              properties:
                Course ID:
                  type: string
                  description: Course identifier
                Day of Week:
                  type: string
                  description: Day name (e.g., Monday, Tuesday)
                Start Time:
                  type: string
                  format: date-time
                  description: Class start time
                End Time:
                  type: string
                  format: date-time
                  description: Class end time
                Location:
                  type: string
                  description: Room or location
                Recurring:
                  type: string
                  description: "Yes or No"
                Period:
                  type: string
                  description: Frequency (e.g., "Weekly")
              additionalProperties: true
      responses:
        "201":
          description: Schedule item created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScheduleItem'
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      operationId: updateScheduleItem
      summary: Update a schedule item
      description: Update an existing schedule item's time, location, or frequency
      tags: [schedule]
      requestBody:
        required: true
        description: Complete schedule item with updated fields
        content:
          application/json:
            schema:
              type: object
              required:
                - Course ID
                - Day of Week
                - Start Time
              properties:
                Course ID:
                  type: string
                  description: Course identifier
                Day of Week:
                  type: string
                  description: Day name
                Start Time:
                  type: string
                  format: date-time
                  description: Start time
                End Time:
                  type: string
                  format: date-time
                  description: End time
                Location:
                  type: string
                  description: Room or location
                Recurring:
                  type: string
                  description: Recurring status
                Period:
                  type: string
                  description: Frequency
              additionalProperties: true
      responses:
        "200":
          description: Schedule item updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScheduleItem'
        "404":
          description: Schedule item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      operationId: deleteScheduleItem
      summary: Delete a schedule item
      description: Remove a specific class time from the schedule by identifying with Course ID, Day, and Start Time
      tags: [schedule]
      parameters:
        - name: courseId
          in: query
          required: true
          description: Course ID of the schedule item to delete
          schema:
            type: string
            example: "COMP 213"
        - name: dayOfWeek
          in: query
          required: true
          description: Day of week of the schedule item
          schema:
            type: string
            example: "Monday"
        - name: startTime
          in: query
          required: true
          description: Start time of the schedule item
          schema:
            type: string
            example: "2025-09-01 10:00"
      responses:
        "200":
          description: Schedule item deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
        "400":
          description: Missing required parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Schedule item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Grading Scale API
  /api/data/grading-scale:
    get:
      operationId: listGradingScale
      summary: List all grade scales
      description: Retrieve all grade scale definitions, optionally filtered by letter grade
      tags: [grading-scale]
      parameters:
        - name: letterGrade
          in: query
          description: Filter by specific letter grade (e.g., "A+", "B")
          schema:
            type: string
            example: "A+"
      responses:
        "200":
          description: List of grade scales retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    minPercentage:
                      type: number
                    maxPercentage:
                      type: number
                    letterGrade:
                      type: string
                    gradePoints:
                      type: number
        "404":
          description: Grade scale not found (when filtering by letterGrade)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      operationId: createGradeScale
      summary: Create a new grade scale
      description: Add a new grade definition to the grading scale
      tags: [grading-scale]
      requestBody:
        required: true
        description: Grade scale entry with percentage range and letter grade
        content:
          application/json:
            schema:
              type: object
              required:
                - minPercentage
                - maxPercentage
                - letterGrade
              properties:
                minPercentage:
                  type: number
                  description: Minimum percentage for this grade
                  example: 90
                maxPercentage:
                  type: number
                  description: Maximum percentage for this grade
                  example: 100
                letterGrade:
                  type: string
                  description: Letter grade (e.g., "A+", "A", "B+")
                  example: "A+"
                gradePoints:
                  type: number
                  description: GPA points for this grade
                  example: 4.0
              additionalProperties: true
      responses:
        "201":
          description: Grade scale created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  minPercentage:
                    type: number
                  maxPercentage:
                    type: number
                  letterGrade:
                    type: string
                  gradePoints:
                    type: number
        "400":
          description: Bad request - grade already exists or missing required fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      operationId: updateGradeScale
      summary: Update a grade scale
      description: Update an existing grade scale entry's percentage boundaries or grade points
      tags: [grading-scale]
      requestBody:
        required: true
        description: Complete grade scale object with updated fields
        content:
          application/json:
            schema:
              type: object
              required:
                - letterGrade
              properties:
                minPercentage:
                  type: number
                  description: Minimum percentage for this grade
                maxPercentage:
                  type: number
                  description: Maximum percentage for this grade
                letterGrade:
                  type: string
                  description: Letter grade (identifier)
                gradePoints:
                  type: number
                  description: GPA points for this grade
              additionalProperties: true
      responses:
        "200":
          description: Grade scale updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  minPercentage:
                    type: number
                  maxPercentage:
                    type: number
                  letterGrade:
                    type: string
                  gradePoints:
                    type: number
        "404":
          description: Grade scale not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      operationId: deleteGradeScale
      summary: Delete a grade scale
      description: Remove a grade definition from the grading scale by letter grade
      tags: [grading-scale]
      parameters:
        - name: letterGrade
          in: query
          required: true
          description: Letter grade to delete (e.g., "A+", "B")
          schema:
            type: string
            example: "A+"
      responses:
        "200":
          description: Grade scale deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
        "400":
          description: letterGrade parameter is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Grade scale not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Deliverables API
  /api/data/deliverables:
    get:
      operationId: listDeliverables
      summary: List all deliverables
      description: Retrieve all assignments, exams, quizzes, and other deliverables from the system
      tags: [deliverables]
      responses:
        "200":
          description: List of deliverables retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Deliverable'
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      operationId: updateDeliverable
      summary: Update a deliverable
      description: Update an assignment's status, grade, or due date. Requires Course ID, Deliverable name, and Open Date to identify the item. Commonly used to record grades and update status from "pending" to "graded".
      tags: [deliverables]
      requestBody:
        required: true
        description: Complete deliverable object with updated fields. Must include Course ID, Deliverable name, and Open Date to identify which item to update.
        content:
          application/json:
            schema:
              type: object
              required:
                - Course ID
                - Deliverable
                - Open Date
              properties:
                Course ID:
                  type: string
                  description: Course identifier (required to identify the deliverable)
                  example: "MECH 205"
                Category:
                  type: string
                  description: Type of deliverable (Quiz, Lab, Exam, Assignment, etc.)
                  example: "Quiz"
                Deliverable:
                  type: string
                  description: Name of the deliverable (required to identify)
                  example: "Quiz 2a: Electronic Principles"
                Open Date:
                  type: string
                  description: Date when assignment opens (required for matching)
                  example: "Sep 5, 2025 10:10 AM"
                Close Date:
                  type: string
                  description: Due date for the deliverable
                  example: "Sep 21, 2025 11:59 PM"
                Weight %:
                  type: string
                  description: Percentage weight in course grade
                  example: "1.67"
                Grade %:
                  type: string
                  description: Percentage grade received (e.g., "97.14")
                  example: "97.14"
                Letter Grade:
                  type: string
                  description: Letter grade equivalent
                  example: "A+"
                Status:
                  type: string
                  description: Current status (pending, graded, submitted, in progress, complete, etc.)
                  example: "graded"
              additionalProperties: true
      responses:
        "200":
          description: Deliverable updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  updatedDeliverable:
                    $ref: '#/components/schemas/Deliverable'
                  gitHubUpdated:
                    type: boolean
                    description: Whether changes were synced to GitHub
                  warning:
                    type: string
                    description: Optional warning message if GitHub sync failed
        "404":
          description: Deliverable not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Calendar API
  /api/calendar:
    get:
      operationId: getCalendarFeed
      summary: Generate calendar feed
      description: Returns an ICS (iCalendar) format feed of schedule data
      tags: [calendar]
      responses:
        "200":
          description: Calendar feed in ICS format
          content:
            text/calendar:
              schema:
                type: string
                format: binary
        "500":
          description: Server error

  # News/Announcements API
  /api/news:
    get:
      operationId: getNewsFeed
      summary: Get course announcements
      description: Retrieve course announcements from Brightspace RSS feeds. Automatically strips HTML tags and caches results for 5 minutes.
      tags: [news]
      parameters:
        - in: query
          name: courseId
          description: Optional course ID to filter announcements from a specific course
          schema:
            type: string
            examples: [MECH 205, COMP 213, STCS 255]
      responses:
        "200":
          description: List of course announcements retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  news:
                    type: object
                    additionalProperties: true
                    description: Course announcements grouped by course
                  timestamp:
                    type: string
                    format: date-time
                    description: Cache timestamp
        "404":
          description: Course not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


  # Time API
  /api/time:
    get:
      operationId: getCurrentTime
      summary: Get current date and time
      description: Retrieve the current date and time information from the server in multiple formats
      tags: [time]
      responses:
        "200":
          description: Current date and time retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  timestamp:
                    type: string
                    format: date-time
                    description: ISO 8601 timestamp
                    example: "2025-10-28T01:30:00.000Z"
                  date:
                    type: string
                    description: Human-readable date
                    example: "October 28, 2025"
                  time:
                    type: string
                    description: Human-readable time with AM/PM
                    example: "01:30:00 AM"
                  timezone:
                    type: string
                    description: Server timezone
                    example: "America/Edmonton"
                  unixTimestamp:
                    type: integer
                    description: Unix timestamp in seconds
                    example: 1727001000
                  year:
                    type: integer
                    description: Current year
                    example: 2025
                  month:
                    type: integer
                    description: Current month (1-12)
                    example: 10
                  day:
                    type: integer
                    description: Current day of month
                    example: 28
                  weekday:
                    type: string
                    description: Day of the week
                    example: "Tuesday"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
