openapi: 3.0.0
info:
  title: PersonalDB
  version: "1.0.0"
  description: API for storing and retrieving personal items (tasks, notes, events, metrics)

servers:
  - url: https://brodiegroch.ca
    description: Production server

tags:
  - name: items
    description: Item storage operations

components:
  securitySchemes:
    api_key:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key for authentication

  schemas:
    Item:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
          enum: [task, note, event, metric]
        data:
          type: object
          additionalProperties: true
        updated_at:
          type: string
          format: date-time

    UpsertRequest:
      type: object
      required: [type, data]
      properties:
        type:
          type: string
          enum: [task, note, event, metric]
          description: Type of item
        data:
          type: object
          additionalProperties: true
          description: Item data

    SuccessResponse:
      type: object
      properties:
        ok:
          type: boolean
          example: true

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error message

paths:
  /api/gpt/upsert:
    post:
      operationId: upsertItem
      summary: Create or update an item
      tags:
        - items
      security:
        - api_key: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertRequest'
            examples:
              task:
                summary: Task example
                value:
                  type: task
                  data:
                    title: "Complete project"
                    priority: "high"
                    due_date: "2024-12-31"
              note:
                summary: Note example
                value:
                  type: note
                  data:
                    content: "Meeting notes from today"
                    tags: ["work", "important"]
      responses:
        "200":
          description: Item successfully created or updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        "400":
          description: Bad request (invalid type or data)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "401":
          description: Unauthorized (missing or invalid API key)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "413":
          description: Payload too large (>8KB)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/gpt/items:
    get:
      operationId: listItems
      summary: List stored items
      tags:
        - items
      security:
        - api_key: []
      parameters:
        - in: query
          name: type
          schema:
            type: string
            enum: [task, note, event, metric]
          description: Filter by item type
        - in: query
          name: limit
          schema:
            type: integer
            default: 50
            maximum: 200
          description: Maximum number of items to return
        - in: query
          name: since
          schema:
            type: string
            format: date-time
          description: Return items updated after this time
      responses:
        "200":
          description: List of items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      operationId: deleteItem
      summary: Delete an item
      tags:
        - items
      security:
        - api_key: []
      parameters:
        - in: query
          name: id
          required: true
          schema:
            type: string
          description: ID of item to delete
      responses:
        "200":
          description: Item deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
